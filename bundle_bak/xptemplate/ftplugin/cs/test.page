


    /*  -------------"_--------------- */
    /* "`w^"                           */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------#ifdef--------------- */
    /* #ifdef `symbol^                     */
    /* `cursor^                            */
    /* #endif `$CL^ `symbol^ `$CR^         */



#ifdef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */

#ifdef symbol_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol_TYPED */ b

`#ifdef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */^

a #ifdef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */


    /*  -------------#ifndef--------------- */
    /* #ifndef `symbol^                     */
    /* `cursor^                             */
    /* #endif `$CL^ `symbol^ `$CR^          */



#ifndef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */

#ifndef symbol_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol_TYPED */ b

`#ifndef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */^

a #ifndef symbol
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol */


    /*  -------------#if--------------- */
    /* #if `0^                          */
    /* `cursor^                         */
    /* #endif                           */



#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif

#if 0_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif b

`#if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif^

a #if 0
WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif


    /*  -------------#include_user--------------- */
    /* #include "`me^.h"                          */



#include "test.h"

#include "me_TYPED.h" b

`#include "test.h"^

a #include "test.h"


    /*  -------------#inc--------------- */
    /* #include <`^.h>                   */



#include <.h>

#include <_TYPED.h> b

`#include <.h>^

a #include <.h>


    /*  -------------#ind--------------- */
    /* #include "`me^.h"                 */



#include "test.h"

#include "me_TYPED.h" b

`#include "test.h"^

a #include "test.h"


    /*  -------------'_--------------- */
    /* '`w^'                           */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(_--------------- */
    /* (`w^)                           */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<_--------------- */
    /* <`w^>                           */



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    /*  -------------[_--------------- */
    /* [`w^]                           */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`_--------------- */
    /* \``w^\`                         */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------assert---------------              */
    /* assert(`$SParg^`isTrue^,`$SPop^"`text^"`$SParg^) */



assert( isTrue, "text" )

assert( isTrue_TYPED, "text_TYPED" ) b

`assert( isTrue, "text" )^

a assert( isTrue, "text" )


    /*  -------------Author--------------- */
    /* `$author^                           */



drdr.xp

drdr.xp b

`drdr.xp^

a drdr.xp


    /*  -------------call--------------- */
    /* `name^(`$SParg^`param^`$SParg^)   */



name( WRAPPED_TEXT
WRAPPED_TEXT_line2 )

name_TYPED( WRAPPED_TEXT
WRAPPED_TEXT_line2 ) b

`name( WRAPPED_TEXT
WRAPPED_TEXT_line2 )^

a name( WRAPPED_TEXT
WRAPPED_TEXT_line2 )


    /*  -------------case--------------- */
    /* case `constant^`$SPcmd^:          */
    /*     `cursor^                      */
    /*     break;                        */



case constant :
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
    break;

    case constant_TYPED :
        WRAPPED_TEXT
        WRAPPED_TEXT_line2
        break; b

        `case constant :
            WRAPPED_TEXT
            WRAPPED_TEXT_line2
            break;^

            a case constant :
                WRAPPED_TEXT
                WRAPPED_TEXT_line2
                break;


    /*  -------------class---------------      */
    /* class `className^                       */
    /* {                                       */
    /*     public `className^(` `ctorParam` ^) */
    /*     {                                   */
    /*         `cursor^                        */
    /*     }                                   */
    /* }                                       */



                class className
                {
                    public className( ctorParam )
                    {
                        
                    }
                }

class className_TYPED
{
    public className_TYPED( ctorParam_TYPED )
    {
        
    }
} b

`class className
{
    public className( ctorParam )
    {
        
    }
}^

a class className
{
    public className( ctorParam )
    {
        
    }
}


    /*  -------------comment--------------- */
    /* `$CL^ `what^^ `$CR^`^                */



/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */ b

`/* WRAPPED_TEXT
WRAPPED_TEXT_line2 */^

a /* WRAPPED_TEXT
WRAPPED_TEXT_line2 */


    /*  -------------commentBlock--------------- */
    /* `$_xCommentLeftWithoutMid^`$CM `cursor^   */
    /* `$_xCommentMidIndent$CR^                  */



/* WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */

/* WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */ b

`/* WRAPPED_TEXT
  * WRAPPED_TEXT_line2
 */^

a /* WRAPPED_TEXT
   * WRAPPED_TEXT_line2
 */


    /*  -------------commentDoc--------------- */
    /* `$CL^`$CM^                              */
    /* `$_xCommentMidIndent$CM `cursor^        */
    /* `$_xCommentMidIndent$CR^                */



/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */

/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */ b

`/**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */^

a /**
 * WRAPPED_TEXT
 * WRAPPED_TEXT_line2
 */


    /*  -------------commentLine--------------- */
    /* `$CL `what` $CR^`^                       */



/* WRAPPED_TEXT */
/* WRAPPED_TEXT_line2 */

/* WRAPPED_TEXT */
/* WRAPPED_TEXT_line2 */ b

`/* WRAPPED_TEXT */
 /* WRAPPED_TEXT_line2 */^

 a /* WRAPPED_TEXT */
   /* WRAPPED_TEXT_line2 */


    /*  -------------default--------------- */
    /* default:                             */
    /*     `cursor^                         */



 default:
     

 default:
      b

      `default:
          ^

          a default:
              


    /*  -------------do---------------                       */
    /* do`$BRloop^{                                          */
    /*     `cursor^                                          */
    /* }`$BRloop^while`$SPcmd^(`$SParg^`condition^`$SParg^); */



do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( condition );

do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( condition_TYPED ); b

`do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( condition );^

a do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( condition );


    /*  -------------elif--------------- */
    /* else `Include:_if^                */



else if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

else if ( condition_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`else if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a else if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------else--------------- */
    /* else`$BRif^{                      */
    /*     `cursor^                      */
    /* }                                 */



else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a else
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------Email--------------- */
    /* `$email^                           */



drdr.xp@gmail.com

drdr.xp@gmail.com b

`drdr.xp@gmail.com^

a drdr.xp@gmail.com


    /*  -------------enum--------------- */
    /* enum `name^`$BRstc^{              */
    /*     `^                            */
    /* }                                 */



enum name
{
    
}

enum name_TYPED
{
    _TYPED
} b

`enum name
{
    
}^

a enum name
{
    
}


    /*  -------------fcomment--------------- */
    /* _CMT_*                                */
    /*  * @author : `$author^ | `$email^     */
    /*  * @description                       */
    /*  *     `cursor^                       */
    /*  * @return {`int^} `desc^             */
    /*  _cmt_                                */



/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */

/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int_TYPED} desc_TYPED
 */ b

`/**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */^

a /**
 * @author : drdr.xp | drdr.xp@gmail.com
 * @description
 *     
 * @return {int} desc
 */


    /*  -------------filehead---------------                                  */
    /* _CMT_*-------------------------/// `sum^ \\\--------------------------- */
    /*  *                                                                     */
    /*  * <b>`function^</b>                                                   */
    /*  * @version : `1.0^                                                    */
    /*  * @since : `strftime("%Y %b %d")^                                     */
    /*  *                                                                     */
    /*  * @description :                                                      */
    /*  *     `cursor^                                                        */
    /*  * @usage :                                                            */
    /*  *                                                                     */
    /*  * @author : `$author^ | `$email^                                      */
    /*  * @copyright `.com.cn^                                                */
    /*  * @TODO :                                                             */
    /*  *                                                                     */
    /*  *--------------------------\\\ `sum^ ///---------------------------_cmt_ */



/**-------------------------/// sum \\\---------------------------
 *
 * <b>function</b>
 * @version : 1.0
 * @since : 2009 Oct 08
 *
 * @description :
 *     
 * @usage :
 *
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright .com.cn
 * @TODO :
 *
 *--------------------------\\\ sum ///---------------------------*/


/**-------------------------/// sum_TYPED \\\---------------------------
 *
 * <b>function_TYPED</b>
 * @version : 10_TYPED
 * @since : 2009 Oct 08
 *
 * @description :
 *     
 * @usage :
 *
 * @author : drdr.xp | drdr.xp@gmail.com
 * @copyright comcn_TYPED
 * @TODO :
 *
 *--------------------------\\\ sum_TYPED ///---------------------------*/
 b

 `/**-------------------------/// sum \\\---------------------------
  *
  * <b>function</b>
  * @version : 1.0
  * @since : 2009 Oct 08
  *
  * @description :
  *     
  * @usage :
  *
  * @author : drdr.xp | drdr.xp@gmail.com
  * @copyright .com.cn
  * @TODO :
  *
  *--------------------------\\\ sum ///---------------------------*/
 ^

 a /**-------------------------/// sum \\\---------------------------
  *
  * <b>function</b>
  * @version : 1.0
  * @since : 2009 Oct 08
  *
  * @description :
  *     
  * @usage :
  *
  * @author : drdr.xp | drdr.xp@gmail.com
  * @copyright .com.cn
  * @TODO :
  *
  *--------------------------\\\ sum ///---------------------------*/
 


    /*  -------------File--------------- */
    /* `file()^                          */



 test.page

 test.page b

 `test.page^

 a test.page


    /*  -------------forever--------------- */
    /* for`$SPcmd^(;;) `cursor^             */



 for (;;) 

 for (;;)  b

 `for (;;) ^

 a for (;;) 


    /*  -------------for---------------                                                                   */
    /* for`$SPcmd^(`$SParg^`int^ `i^`$SPop^=`$SPop^`0^; `i^`$SPop^<`$SPop^`len^; ++`i^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                                                                       */
    /* }                                                                                                  */



 for ( int i = 0; i < len; ++i )
 {
     
 }

for ( int_TYPED i_TYPED = 0_TYPED; i_TYPED < len_TYPED; ++i_TYPED )
{
    
} b

`for ( int i = 0; i < len; ++i )
{
    
}^

a for ( int i = 0; i < len; ++i )
{
    
}


    /*  -------------foreach---------------      */
    /* foreach ( `var^ `e^ in `what^ )`$BRloop^{ */
    /*     `cursor^                              */
    /* }                                         */



foreach ( var e in what )
{
    
}

foreach ( var_TYPED e_TYPED in what_TYPED )
{
    
} b

`foreach ( var e in what )
{
    
}^

a foreach ( var e in what )
{
    
}


    /*  -------------fornn---------------                                                                                                */
    /* for`$SPcmd^(`$SParg^`$FOR_SCOPE^`$VAR_PRE`ptr^`$SPop^=`$SPop^`init^; `$NULL^`$SPop^!=`$SPop^`ptr^; `^R('ptr')^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                                                                                                      */
    /* }                                                                                                                                 */



for ( ptr = init; null != ptr; ptr )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

for ( ptr_TYPED = init_TYPED; null != ptr_TYPED; _TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`for ( ptr = init; null != ptr; ptr )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a for ( ptr = init; null != ptr; ptr )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------forr---------------                                                                     */
    /* for`$SPcmd^(`$SParg^`int^ `i^`$SPop^=`$SPop^`n^; `i^`$SPop^>`=^`$SPop^`end^; --`i^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                                                                          */
    /* }                                                                                                     */



for ( int i = n; i >= end; --i )
{
    
}

for ( int_TYPED i_TYPED = n_TYPED; i_TYPED >_TYPED end_TYPED; --i_TYPED )
{
    
} b

`for ( int i = n; i >= end; --i )
{
    
}^

a for ( int i = n; i >= end; --i )
{
    
}


    /*  -------------fprintf---------------                     */
    /* fprintf(`$SParg^`stream^,`$SPop^`:_printfElts:^`$SParg^) */



fprintf( stream, "pattern" )

fprintf( stream_TYPED, "pattern_TYPED" ) b

`fprintf( stream, "pattern" )^

a fprintf( stream, "pattern" )


    /*  -------------fun---------------                                                       */
    /* `c_fun_type_indent()^`int^`c_fun_body_indent()^`name^(`$SParg`param?`$SParg^)`$BRfun^{ */
    /*     `cursor^                                                                           */
    /* }                                                                                      */



    int
name()
{
    
}

    int_TYPED
name_TYPED( param_TYPED )
{
    
} b

`    int
name()
{
    
}^

a     int
name()
{
    
}


    /*  -------------if0--------------- */
    /* `Include:_if^                    */



if ( 0 == var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if ( 0 == var_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`if ( 0 == var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a if ( 0 == var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------ifee---------------                              */
    /* `:_if:^` `else_if...{{^`$BRel^`Include:elif^` `else_if...^`}}^ */



if ( condition )
{
    
}
else if ( condition )
{
    /* cursor */
}
else if ( condition )
{
    /* cursor */
}
else if ( condition )
{
    /* cursor */
}

if ( condition_TYPED )
{
    _TYPED
} else_if_TYPED b

`if ( condition )
{
    
}
else if ( condition )
{
    /* cursor */
}
else if ( condition )
{
    /* cursor */
}
else if ( condition )
{
    /* cursor */
}^

a if ( condition )
{
    
}
else if ( condition )
{
    /* cursor */
}
else if ( condition )
{
    /* cursor */
}
else if ( condition )
{
    /* cursor */
}


    /*  -------------ifn0--------------- */
    /* `Include:_if^                     */



if ( 0 != var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if ( 0 != var_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`if ( 0 != var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a if ( 0 != var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------ifn--------------- */
    /* `Include:_if^                    */



if ( null == var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if ( null == var_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`if ( null == var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a if ( null == var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------ifnn--------------- */
    /* `Include:_if^                     */



if ( null != var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if ( null != var_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`if ( null != var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a if ( null != var )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------if--------------- */
    /* `Include:_if^                   */



if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

if ( condition_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a if ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------main---------------        */
    /* public static void Main( string[] args ) */
    /* {                                        */
    /*     `cursor^                             */
    /* }                                        */



public static void Main( string[] args )
{
    
}

public static void Main( string[] args )
{
    
} b

`public static void Main( string[] args )
{
    
}^

a public static void Main( string[] args )
{
    
}


    /*  -------------malloc---------------                                                       */
    /* (`type^int^*)malloc(`$SParg^sizeof(`$SParg^`type^`$SParg^)`$SPop^*`$SPop^`count^`$SParg^) */



(int*)malloc( sizeof( int ) * count )

    (type_TYPED*)malloc( sizeof( type_TYPED ) * count_TYPED ) b

    `(int*)malloc( sizeof( int ) * count )^

    a (int*)malloc( sizeof( int ) * count )


    /*  -------------memcpy---------------                                                            */
    /* memcpy(`$SParg^`dest^,`$SPop^`source^,`$SPop^sizeof(`type^int^)`$SPop^*`$SPop^`count^`$SParg^) */



    memcpy( dest, source, sizeof(int) * count )

    memcpy( dest_TYPED, source_TYPED, sizeof(type_TYPED) * count_TYPED ) b

    `memcpy( dest, source, sizeof(int) * count )^

    a memcpy( dest, source, sizeof(int) * count )


    /*  -------------memset---------------                                                                              */
    /* memset(`$SParg^`buffer^,`$SPop^`what^0^,`$SPop^sizeof(`$SParg^`type^int^`$SParg^)`$SPop^*`$SPop^`count^`$SParg^) */



    memset( buffer, 0, sizeof( int ) * count )

    memset( buffer_TYPED, what_TYPED, sizeof( type_TYPED ) * count_TYPED ) b

    `memset( buffer, 0, sizeof( int ) * count )^

    a memset( buffer, 0, sizeof( int ) * count )


    /*  -------------namespace--------------- */
    /* namespace `name^                       */
    /* {                                      */
    /*     `cursor^                           */
    /* }                                      */



    namespace name
    {
        
    }

namespace name_TYPED
{
    
} b

`namespace name
{
    
}^

a namespace name
{
    
}


    /*  -------------once--------------- */
    /* #ifndef `symbol^                  */
    /* #     define `symbol^             */
    /*                                   */
    /* `cursor^                          */
    /* #endif `$CL^ `symbol^ `$CR^       */



#ifndef __TEST_PAGE__
#     define __TEST_PAGE__

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* __TEST_PAGE__ */

#ifndef symbol_TYPED
#     define symbol_TYPED

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* symbol_TYPED */ b

`#ifndef __TEST_PAGE__
#     define __TEST_PAGE__

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* __TEST_PAGE__ */^

a #ifndef __TEST_PAGE__
#     define __TEST_PAGE__

WRAPPED_TEXT
WRAPPED_TEXT_line2
#endif /* __TEST_PAGE__ */


    /*  -------------printf---------------     */
    /* printf(`$SParg^`:_printfElts:^`$SParg^) */



printf( "pattern" )

printf( "pattern_TYPED" ) b

`printf( "pattern" )^

a printf( "pattern" )


    /*  -------------prop--------------- */
    /* public `type^ `Name^              */
    /* {`                                */
    /*     `get...{{^                    */
    /*     get { return `what^; }`}}^`   */
    /*     `set...{{^                    */
    /*     set { `what^ = `value^; }`}}^ */
    /* }                                 */



public type Name
{
    get { return what; }
    set { what = value; }
}

public type_TYPED Name_TYPED
{
    get_TYPED
    set_TYPED
} b

`public type Name
{
    get { return what; }
    set { what = value; }
}^

a public type Name
{
    get { return what; }
    set { what = value; }
}


    /*  -------------region_--------------- */
    /* #region `regionText^                 */
    /* `wrapped^                            */
    /* `cursor^                             */
    /* #endregion _CMT_ `regionText^ _cmt_  */



#region regionText
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText */

#region regionText_TYPED
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText_TYPED */ b

`#region regionText
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText */^

a #region regionText
WRAPPED_TEXT
WRAPPED_TEXT_line2

#endregion /* regionText */


    /*  -------------snprintf---------------                                */
    /* snprintf(`$SParg^`str^,`$SPop^`size^,`$SPop^`:_printfElts:^`$SParg^) */



snprintf( str, size, "pattern" )

snprintf( str_TYPED, size_TYPED, "pattern_TYPED" ) b

`snprintf( str, size, "pattern" )^

a snprintf( str, size, "pattern" )


    /*  -------------sprintf---------------                  */
    /* sprintf(`$SParg^`str^,`$SPop^`:_printfElts:^`$SParg^) */



sprintf( str, "pattern" )

sprintf( str_TYPED, "pattern_TYPED" ) b

`sprintf( str, "pattern" )^

a sprintf( str, "pattern" )


    /*  -------------struct---------------          */
    /* `public^ struct `structName^                 */
    /* {                                            */
    /*     `fieldAccess^public^ `type^ `name^;`...^ */
    /*     `fieldAccess^public^ `type^ `name^;`...^ */
    /* }                                            */



public struct structName
{
    public type name;
    public type name;
    public type name;
    public type name;
}

public_TYPED struct structName_TYPED
{
    fieldAccess_TYPED type_TYPED name_TYPED;_TYPED
} b

`public struct structName
{
    public type name;
    public type name;
    public type name;
    public type name;
}^

a public struct structName
{
    public type name;
    public type name;
    public type name;
    public type name;
}


    /*  -------------switch---------------    */
    /* switch (`$SParg^`var^`$SParg^)`$BRif^{ */
    /*     `Include:case^                     */
    /* }                                      */



switch ( var )
{
    case constant :
        WRAPPED_TEXT
        WRAPPED_TEXT_line2
        break;
}

switch ( var_TYPED )
{
    case constant_TYPED :
        WRAPPED_TEXT
        WRAPPED_TEXT_line2
        break;
} b

`switch ( var )
{
    case constant :
        WRAPPED_TEXT
        WRAPPED_TEXT_line2
        break;
}^

a switch ( var )
{
    case constant :
        WRAPPED_TEXT
        WRAPPED_TEXT_line2
        break;
}


    /*  -------------try--------------- */
    /* try                              */
    /* {                                */
    /*     `what^                       */
    /* }`                               */
    /* `...^                            */
    /* catch (`except^ e)               */
    /* {                                */
    /*     `handler^                    */
    /* }`                               */
    /* `...^`                           */
    /* `finally...{{^                   */
    /* finally                          */
    /* {                                */
    /*     `cursor^                     */
    /* }`}}^                            */



try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}

try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
_TYPED
finally_TYPED b

`try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}^

a try
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
catch (except e)
{
    /* handler */
}
finally
{
    
}


    /*  -------------while0---------------                   */
    /* do`$BRloop^{                                          */
    /*     `cursor^                                          */
    /* }`$BRloop^while`$SPcmd^(`$SParg^`condition^`$SParg^); */



do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( false );

do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( false ); b

`do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( false );^

a do
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}
while ( false );


    /*  -------------while1---------------                  */
    /* while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                         */
    /* }                                                    */



while ( true )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

while ( true )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`while ( true )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a while ( true )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------whilenn---------------                 */
    /* while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                         */
    /* }                                                    */



while ( null != x )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

while ( null != x_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`while ( null != x )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a while ( null != x )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------while---------------                   */
    /* while`$SPcmd^(`$SParg^`condition^`$SParg^)`$BRloop^{ */
    /*     `cursor^                                         */
    /* }                                                    */



while ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}

while ( condition_TYPED )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
} b

`while ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}^

a while ( condition )
{
    WRAPPED_TEXT
    WRAPPED_TEXT_line2
}


    /*  -------------{_--------------- */
    /* {`w^}                           */



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

`{WRAPPED_TEXT
WRAPPED_TEXT_line2}^

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

