


    /*  -------------"_--------------- */
    /* "`w^"                           */



"WRAPPED_TEXT
WRAPPED_TEXT_line2"

"WRAPPED_TEXT
WRAPPED_TEXT_line2" b

`"WRAPPED_TEXT
WRAPPED_TEXT_line2"^

a "WRAPPED_TEXT
WRAPPED_TEXT_line2"


    /*  -------------'_--------------- */
    /* '`w^'                           */



'WRAPPED_TEXT
WRAPPED_TEXT_line2'

'WRAPPED_TEXT
WRAPPED_TEXT_line2' b

`'WRAPPED_TEXT
WRAPPED_TEXT_line2'^

a 'WRAPPED_TEXT
WRAPPED_TEXT_line2'


    /*  -------------(_--------------- */
    /* (`w^)                           */



(WRAPPED_TEXT
WRAPPED_TEXT_line2)

(WRAPPED_TEXT
WRAPPED_TEXT_line2) b

`(WRAPPED_TEXT
WRAPPED_TEXT_line2)^

a (WRAPPED_TEXT
WRAPPED_TEXT_line2)


    /*  -------------<_--------------- */
    /* <`w^>                           */



<WRAPPED_TEXT
WRAPPED_TEXT_line2>

<WRAPPED_TEXT
WRAPPED_TEXT_line2> b

`<WRAPPED_TEXT
WRAPPED_TEXT_line2>^

a <WRAPPED_TEXT
WRAPPED_TEXT_line2>


    /*  -------------[_--------------- */
    /* [`w^]                           */



[WRAPPED_TEXT
WRAPPED_TEXT_line2]

[WRAPPED_TEXT
WRAPPED_TEXT_line2] b

`[WRAPPED_TEXT
WRAPPED_TEXT_line2]^

a [WRAPPED_TEXT
WRAPPED_TEXT_line2]


    /*  -------------`_--------------- */
    /* \``w^\`                         */



`WRAPPED_TEXT
WRAPPED_TEXT_line2`

`WRAPPED_TEXT
WRAPPED_TEXT_line2` b

``WRAPPED_TEXT
WRAPPED_TEXT_line2`^

a `WRAPPED_TEXT
WRAPPED_TEXT_line2`


    /*  -------------alias--------------- */
    /* ALIAS: `newword^ `oldword^         */



ALIAS: newword oldword

ALIAS: newword_TYPED oldword b

`ALIAS: newword oldword^

a ALIAS: newword oldword


    /*  -------------arr--------------- */
    /* { `cursor^ }                     */



{  }

{  } b

`{  }^

a {  }


    /*  -------------Author--------------- */
    /* `$author^                           */



drdr.xp

drdr.xp b

`drdr.xp^

a drdr.xp


    /*  -------------bi--------------- */
    /* [ `first^ ] [ `cursor^ ] bi     */



[ first ] [  ] bi

[ first_TYPED ] [  ] bi b

`[ first ] [  ] bi^

a [ first ] [  ] bi


    /*  -------------case---------------          */
    /* { { `case^ [ `code^ ] }`...^               */
    /*   { `case^ [ `code^ ] }`...^`default...{{^ */
    /*   [ `cursor^ ]`}}^                         */
    /* } case                                     */



{ { case [ code ] }
  { case [ code ] }
    { case [ code ] }
      { case [ code ] }
      [  ]
} case

{ { case_TYPED [ code_TYPED ] }_TYPEDdefault_TYPED
} case b

`{ { case [ code ] }
  { case [ code ] }
    { case [ code ] }
      { case [ code ] }
      [  ]
} case^

a { { case [ code ] }
  { case [ code ] }
    { case [ code ] }
      { case [ code ] }
      [  ]
} case


    /*  -------------cleave--------------- */
    /* { [ `code^ ]`...^                   */
    /*   [ `code^ ]`...^                   */
    /* } cleave                            */



{ [ code ]
  [ code ]
    [ code ]
      [ code ]
} cleave

{ [ code_TYPED ]_TYPED
} cleave b

`{ [ code ]
  [ code ]
    [ code ]
      [ code ]
} cleave^

a { [ code ]
  [ code ]
    [ code ]
      [ code ]
} cleave


    /*  -------------cond---------------              */
    /* { { [ `cond^ ] [ `code^ ] }`...^               */
    /*   { [ `cond^ ] [ `code^ ] }`...^`default...{{^ */
    /*   [ `cursor^ ]`}}^                             */
    /* } cond                                         */



{ { [ cond ] [ code ] }
  { [ cond ] [ code ] }
    { [ cond ] [ code ] }
      { [ cond ] [ code ] }
      [  ]
} cond

{ { [ cond_TYPED ] [ code_TYPED ] }_TYPEDdefault_TYPED
} cond b

`{ { [ cond ] [ code ] }
  { [ cond ] [ code ] }
    { [ cond ] [ code ] }
      { [ cond ] [ code ] }
      [  ]
} cond^

a { { [ cond ] [ code ] }
  { [ cond ] [ code ] }
    { [ cond ] [ code ] }
      { [ cond ] [ code ] }
      [  ]
} cond


    /*  -------------const--------------- */
    /* CONSTANT: `word^ `constantValue^   */



CONSTANT: word constantValue

CONSTANT: word_TYPED constantValue b

`CONSTANT: word constantValue^

a CONSTANT: word constantValue


    /*  -------------dip--------------- */
    /* [ `cursor^ ] dip                 */



[  ] dip

[  ] dip b

`[  ] dip^

a [  ] dip


    /*  -------------Email--------------- */
    /* `$email^                           */



drdr.xp@gmail.com

drdr.xp@gmail.com b

`drdr.xp@gmail.com^

a drdr.xp@gmail.com


    /*  -------------File--------------- */
    /* `file()^                          */



test.page

test.page b

`test.page^

a test.page


    /*  -------------filter--------------- */
    /* [ `cursor^ ] filter                 */



[  ] filter

[  ] filter b

`[  ] filter^

a [  ] filter


    /*  -------------if--------------- */
    /* `cond^ [ `then^ ] [ `else^ ] if */



cond [ then ] [ else ] if

cond_TYPED [ then_TYPED ] [ else_TYPED ] if b

`cond [ then ] [ else ] if^

a cond [ then ] [ else ] if


    /*  -------------keep--------------- */
    /* [ `cursor^ ] keep                 */



[  ] keep

[  ] keep b

`[  ] keep^

a [  ] keep


    /*  -------------map--------------- */
    /* [ `cursor^ ] map                 */



[  ] map

[  ] map b

`[  ] map^

a [  ] map


    /*  -------------mod---------------    */
    /* USING: kernel sequences accessors ; */
    /* IN: `moduleName^                    */



USING: kernel sequences accessors ;
IN: src..Users.drmingdrmer.bash.xp.vim.xp.plugins.extern.xpt.gitsvn.src.ftplugin.test

USING: kernel sequences accessors ;
IN: src..Users.drmingdrmer.bash.xp.vim.xp.plugins.extern.xpt.gitsvn.src.ftplugin.test b

`USING: kernel sequences accessors ;
IN: src..Users.drmingdrmer.bash.xp.vim.xp.plugins.extern.xpt.gitsvn.src.ftplugin.test^

a USING: kernel sequences accessors ;
IN: src..Users.drmingdrmer.bash.xp.vim.xp.plugins.extern.xpt.gitsvn.src.ftplugin.test


    /*  -------------quote--------------- */
    /* [ `cursor^ ]                       */



[  ]

[  ] b

`[  ]^

a [  ]


    /*  -------------test--------------- */
    /* { `ret^ } [ `test^ ] unit-test    */



{ ret } [ test ] unit-test

{ ret_TYPED } [ test_TYPED ] unit-test b

`{ ret } [ test ] unit-test^

a { ret } [ test ] unit-test


    /*  -------------times--------------- */
    /* `count^ [ `what^ ] times           */



count [ what ] times

count_TYPED [ what_TYPED ] times b

`count [ what ] times^

a count [ what ] times


    /*  -------------tri---------------          */
    /* [ `first^ ] [ `second^ ] [ `cursor^ ] tri */



[ first ] [ second ] [  ] tri

[ first_TYPED ] [ second_TYPED ] [  ] tri b

`[ first ] [ second ] [  ] tri^

a [ first ] [ second ] [  ] tri


    /*  -------------unless--------------- */
    /* [ `cursor^ ] unless                 */



[  ] unless

[  ] unless b

`[  ] unless^

a [  ] unless


    /*  -------------vec--------------- */
    /* V{ `cursor^ }                    */



V{  }

V{  } b

`V{  }^

a V{  }


    /*  -------------when--------------- */
    /* [ `cursor^ ] when                 */



[  ] when

[  ] when b

`[  ] when^

a [  ] when


    /*  -------------{_--------------- */
    /* {`w^}                           */



{WRAPPED_TEXT
WRAPPED_TEXT_line2}

{WRAPPED_TEXT
WRAPPED_TEXT_line2} b

`{WRAPPED_TEXT
WRAPPED_TEXT_line2}^

a {WRAPPED_TEXT
WRAPPED_TEXT_line2}

